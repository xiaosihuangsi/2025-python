{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Lab \u00b7 Learn by Building","text":"<p>Welcome to Python Lab</p> <p>A structured collection of Python projects designed to develop core programming skills through practical implementation.</p>"},{"location":"#project-list","title":"\ud83d\udcda Project List","text":"# Project Name Description 1 Word Counter A script to count the number of words in a text file using command-line arguments. 2 Simple Calculator A basic calculator that performs addition, subtraction, multiplication, and division. 3 String Toolkit Basic text processing utilities, including string analysis and slicing. 4 List Organizer Allows dynamic list operations like appending, slicing, and copying based on user input. 5 Number Classifier Classifies an integer input as negative, zero, single (1), or more. 6 For Loop Practice Demonstrates looping through lists and dictionaries with filtering examples. 7 Range Practice Generate and explore number sequences using Python's <code>range()</code> function. 8 Break &amp; Continue Practice Demo of <code>break</code> to exit loops early and <code>continue</code> to skip iterations. 9 Loop-Else Prime Checker Demonstrates the use of <code>else</code> with loops to identify prime numbers. 10 Pass Statement Demo Demonstrates Python's <code>pass</code> statement as a placeholder in loops, classes, and functions. 11 Match Statement Demo Demonstrates Python 3.10+ structural pattern matching."},{"location":"#about-the-author","title":"About the Author","text":"<p>Created and maintained by Xiaosi Huang, an enthusiastic Python learner and builder who believes that the best way to learn is to make things.</p> <p>\ud83d\udc49 You can explore more of their work at: \ud83d\udd17 github.com/xiaosihuangsi</p>"},{"location":"projects/break_continue/","title":"Break &amp; Continue Practice","text":"<p>Illustrates how <code>break</code> exits a loop and <code>continue</code> skips to the next iteration.</p>"},{"location":"projects/break_continue/#example","title":"Example","text":""},{"location":"projects/calculator/","title":"Calculator Tool","text":"<p>The Calculator Tool performs basic arithmetic operations: addition, subtraction, multiplication, and division.   It\u2019s ideal for beginners learning how to take user input and apply conditional logic to real-world calculations.</p>"},{"location":"projects/calculator/#how-to-use","title":"How to Use","text":"<p>You can run this tool by executing the script directly or from the Python Tool Hub menu.</p> <p>Follow the prompts:</p> <ol> <li>Enter the first number  </li> <li>Choose an operator (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>)  </li> <li>Enter the second number</li> </ol> <p>The tool will then display the result. If an invalid operator is entered or division by zero occurs, an error message will be shown.</p>"},{"location":"projects/calculator/#example","title":"Example","text":""},{"location":"projects/calculator/#addition","title":"Addition","text":"<pre><code>$ python calculator.py\nEnter first number: 12  \nEnter operator (+, -, *, /): +  \nEnter second number: 8  \n</code></pre> <p>Result: 20.0</p>"},{"location":"projects/calculator/#division-by-zero","title":"Division by Zero","text":"<pre><code>$ python calculator.py\nEnter first number: 10  \nEnter operator (+, -, *, /): /  \nEnter second number: 0  \n</code></pre> <p>Result: Error: Cannot divide by zero.</p>"},{"location":"projects/calculator/#file-location","title":"File Location","text":"<pre><code>Path: calculator_tool/calculator.py\n</code></pre>"},{"location":"projects/for_loop/","title":"For Loop Practice Tool","text":"<p>The For Loop Practice Tool demonstrates list and dictionary iteration using Python <code>for</code> loops. It helps visualize how data structures like lists and dictionaries can be traversed and filtered.</p>"},{"location":"projects/for_loop/#how-to-use","title":"How to Use","text":"<p>You\u2019ll be prompted to choose one of two demos:</p> <ol> <li>List Loop Demo </li> <li>Enter a comma-separated list of words.  </li> <li> <p>The tool will display each word and its length.</p> </li> <li> <p>Dictionary Loop Demo </p> </li> <li>A predefined dictionary of users and statuses will be shown.  </li> <li>The tool will then filter and print only the active users.</li> </ol>"},{"location":"projects/for_loop/#example","title":"Example","text":""},{"location":"projects/for_loop/#1-list-loop-demo","title":"1. List Loop Demo","text":"<pre><code>Enter a list of words, separated by commas: apple, banana, cherry\n\n\ud83d\udccb Word and Lengths:\n- apple (5 letters)\n- banana (6 letters)\n- cherry (6 letters)\n</code></pre>"},{"location":"projects/for_loop/#2-dictionary-loop-demo","title":"2. Dictionary Loop Demo","text":"<pre><code> All users and statuses:\n- Hans: active\n- \u00c9l\u00e9onore: inactive\n- Lulu: active\n\n\u2705 Filtering active users:\n- Hans\n- Lulu\n```bash\n\n## File Location\n```bash\nfor_tool/for_practice.py\n</code></pre>"},{"location":"projects/list_organizer/","title":"List Organizer Tool","text":"<p>The List Organizer Tool helps you interact with Python lists\u2014adding elements, slicing, and copying them. It's great for learning how list operations work in Python.</p>"},{"location":"projects/list_organizer/#how-to-use","title":"How to Use","text":"<ol> <li>Input a list of numbers separated by commas.</li> <li>Append a new number to the list.</li> <li>Slice the list using start and end indices.</li> <li>Create a copy of the modified list.</li> </ol>"},{"location":"projects/list_organizer/#example","title":"Example","text":"<pre><code>Enter a list of numbers separated by commas: 1, 2, 3, 4\nYour list: [1, 2, 3, 4]\n\nEnter a new number to append: 99\nUpdated list: [1, 2, 3, 4, 99]\n\nEnter start index for slicing: 1\nEnter end index for slicing: 4\nSliced list: [2, 3, 4]\n\nCopied list: [1, 2, 3, 4, 99]\n</code></pre>"},{"location":"projects/list_organizer/#file-location","title":"File Location","text":"<pre><code>Path: list_organizer_tool/list_organizer.py\n</code></pre>"},{"location":"projects/loop_else/","title":"Loop-Else Prime Checker","text":"<p>Demonstrates using <code>else</code> in a loop to detect prime numbers.</p>"},{"location":"projects/loop_else/#example","title":"Example","text":""},{"location":"projects/match/","title":"Match Statement","text":""},{"location":"projects/match/#matchmd","title":"\ud83d\udcc4 <code>match.md</code>","text":"<p>```markdown</p>"},{"location":"projects/match/#match-statement-practice","title":"Match Statement Practice","text":"<p>Demonstrates Python's <code>match-case</code> statement to pattern match values and object structures.</p>"},{"location":"projects/match/#example","title":"Example","text":"<p>```python match value:     case 1:         print(\"One\")     case _:         print(\"Default\")</p>"},{"location":"projects/number_classifier/","title":"Number Classifier Tool","text":"<p>The Number Classifier Tool prompts the user for an integer and classifies the number as:</p> <ul> <li>Negative \u2192 reported as changed to zero  </li> <li>Zero  </li> <li>One (displayed as \"Single\")  </li> <li>Greater than one (displayed as \"More\")</li> </ul> <p>This is a great beginner exercise for conditional logic in Python.</p>"},{"location":"projects/number_classifier/#how-to-use","title":"How to Use","text":"<ol> <li>Run the tool.</li> <li>Enter any integer (e.g., -5, 0, 1, 42).</li> <li> <p>Based on the value, the tool prints one of the following:</p> <ul> <li><code>\"Negative changed to zero\"</code></li> <li><code>\"Zero\"</code></li> <li><code>\"Single\"</code></li> <li><code>\"More\"</code></li> </ul> </li> </ol>"},{"location":"projects/number_classifier/#example","title":"Example","text":"<pre><code>Please enter an integer: -3\nNegative changed to zero\n\nPlease enter an integer: 0\nZero\n\nPlease enter an integer: 1\nSingle\n\nPlease enter an integer: 5\nMore\n</code></pre> <p>If a non-integer is entered, the tool prints:</p> <pre><code>\u274c Invalid input! Please enter a number.\n</code></pre>"},{"location":"projects/number_classifier/#file-location","title":"File Location","text":"<pre><code>Path: `number_classifier_tool/number_classifier.py`\n</code></pre>"},{"location":"projects/pass_statement/","title":"Pass Statement Demo","text":"<p>Shows three uses of the <code>pass</code> statement: in loops, placeholder functions, and empty classes.</p>"},{"location":"projects/pass_statement/#example","title":"Example","text":"<p>```python while True:     pass  # Press Ctrl+C to stop</p>"},{"location":"projects/range/","title":"Range Practice","text":"<p>Demonstrates Python's <code>range()</code> for generating sequences and iterating.</p>"},{"location":"projects/range/#example","title":"Example","text":""},{"location":"projects/string_toolkit/","title":"String Toolkit","text":"<p>The String Toolkit allows users to interactively explore string content through analysis, slicing, repetition, and character inspection. It helps reinforce key Python string concepts like indexing, slicing, type checking, and input validation.</p>"},{"location":"projects/string_toolkit/#how-to-use","title":"How to Use","text":"<p>When launched, the tool will:</p> <ol> <li>Ask for a text input from the user.</li> <li>Analyze the string:</li> <li>Show the first and last characters.</li> <li>Show the length of the string.</li> <li>Repeat the string multiple times.</li> <li>Ask for a substring range and extract it if valid.</li> <li>Count vowels and identify character types (letters, digits, alphanumerics, special characters).</li> </ol>"},{"location":"projects/string_toolkit/#example","title":"Example","text":""},{"location":"projects/string_toolkit/#input","title":"Input","text":"<pre><code>Enter a text: Python3.10!\nHow many times to repeat the text? (default 3): 2\nEnter start index for substring (default 1): 1\nEnter end index for substring (default 5): 5\n</code></pre>"},{"location":"projects/string_toolkit/#output","title":"Output","text":"<pre><code>String Analysis:\nFirst character: P\nLast character: !\nLength of the text: 10\nText repeated 2 times: Python3.10!Python3.10!\nSubstring from index 1 to 5: ytho\nVowel count (a, e, i, o, u): 1\nThe text contains special characters.\n</code></pre>"},{"location":"projects/string_toolkit/#file-location","title":"File Location","text":"<p>Path: <code>string_toolkit_tool/string_toolkit.py</code></p>"},{"location":"projects/word_counter/","title":"Word Counter Tool","text":"<p>The Word Counter Tool reads a text file or input string and counts the number of words it contains. This is useful for quick analysis, content validation, or basic natural language processing.</p>"},{"location":"projects/word_counter/#how-to-use","title":"How to Use","text":"<p>You can run the tool by executing the Python script directly, or by selecting it from the tool hub interface.</p> <p>It accepts either: - a text input via the terminal - or a <code>.txt</code> file path as an argument</p> <p>The tool will then return the total word count.</p>"},{"location":"projects/word_counter/#example","title":"Example","text":"<pre><code>Enter text or file path: Hello world, this is a test.\nWord count: 6\n</code></pre>"},{"location":"projects/word_counter/#file-location","title":"File Location","text":"<pre><code>Path: word_counter_tool/word_counter.py\n</code></pre>"}]}